# values-test-minikube.yaml - Configuração para Minikube com Redis/PostgreSQL externos
# Use este arquivo para testes no Minikube com bancos externos

# Configuração Global
global:
  domain: "n8n-poc.com"
  storageClass: "standard"  # Minikube default storage class
  imageRegistry: ""
  imagePullSecrets: []

# Configuração do N8N
n8n:
  image:
    registry: docker.io
    repository: n8nio/n8n
    tag: "1.98.2"
    pullPolicy: IfNotPresent
  
  # Modo de execução
  executionMode: queue
  
  # Escalabilidade - configuração mínima para Minikube
  main:
    replicaCount: 1
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"  # Reduzido para Minikube
        cpu: "500m"
  
  workers:
    enabled: true
    replicaCount: 2
    resources:
      requests:
        memory: "256Mi"  # Reduzido para Minikube
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    autoscaling:
      enabled: false  # Desabilitado no Minikube
  
  webhooks:
    enabled: true
    replicaCount: 1
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"  # Reduzido para Minikube
        cpu: "250m"
    autoscaling:
      enabled: false  # Desabilitado no Minikube

  # Configurações de ambiente (usando bancos externos)
  config:
    # Configuração básica - URLs corretas para cada componente
    N8N_HOST: "n8n.test.local"
    N8N_PORT: "5678"
    N8N_PROTOCOL: "http"  # HTTP para teste
    N8N_SECURE_COOKIE: "false"
    N8N_EDITOR_BASE_URL: "http://n8n.test.local"  # URL específica para interface
    WEBHOOK_URL: "http://n8n-webhooks.test.local"  # URL específica para webhooks
    
    # Database EXTERNO
    DB_TYPE: "postgresdb"
    DB_POSTGRESDB_HOST: "postgres-postgresql.default.svc.cluster.local"  # Service name do PostgreSQL externo
    DB_POSTGRESDB_PORT: "5432"
    DB_POSTGRESDB_DATABASE: "n8ndb"
    DB_POSTGRESDB_USER: "n8n"
    DB_POSTGRESDB_SCHEMA: "public"
    DB_POSTGRESDB_SSL: "false"  # Desabilitar SSL para teste
    
    # Queue Redis EXTERNO
    QUEUE_BULL_REDIS_HOST: "redis-master.default.svc.cluster.local"  # Service name do Redis externo
    QUEUE_BULL_REDIS_PORT: "6379"
    QUEUE_BULL_REDIS_DB: "0"
    QUEUE_HEALTH_CHECK_ACTIVE: "true"
    
    # Performance (reduzido para Minikube)
    EXECUTIONS_TIMEOUT: "900"   # 15 minutos
    EXECUTIONS_TIMEOUT_MAX: "1800"  # 30 minutos
    EXECUTIONS_DATA_SAVE_ON_ERROR: "all"
    EXECUTIONS_DATA_SAVE_ON_SUCCESS: "all"
    EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: "true"
    EXECUTIONS_DATA_PRUNE: "true"
    EXECUTIONS_DATA_MAX_AGE: "72"  # 3 dias (reduzido)

    # Configuração obrigatória para modo queue
    EXECUTIONS_MODE: "queue"
    N8N_RUNNERS_ENABLED: "true"
    N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "false"
    
    # Segurança
    N8N_BASIC_AUTH_ACTIVE: "true"
    N8N_BASIC_AUTH_USER: "admin"
    N8N_METRICS: "true"
    N8N_DIAGNOSTICS_ENABLED: "false"
    
    # Payload reduzido para Minikube
    N8N_PAYLOAD_DEFAULT_MAX_SIZE: "8"  # 8MB ao invés de 16MB
    N8N_DEFAULT_BINARY_DATA_MODE: "filesystem"
  
  # Performance settings para Minikube
  performance:
    executionTimeout: "900"
    executionTimeoutMax: "1800"
    saveOnError: "all"
    saveOnSuccess: "all"
    saveManualExecutions: "true"
    dataPrune: "true"
    dataMaxAge: "72"
    payloadMaxSize: "8"
    binaryDataMode: "filesystem"
  
  queue:
    healthCheck: "true"
  
  security:
    basicAuth:
      enabled: true
      user: "admin"
    encryption:
      keyLength: 32
  
  monitoring:
    metrics:
      enabled: true
    diagnostics:
      enabled: false

  # Gerenciamento de Secrets - USAR SECRET EXISTENTE DO POSTGRESQL
  secrets:
    create: false  # ✅ CORREÇÃO: Não criar secrets, usar existentes
    
    # Database password - usar secret existente do PostgreSQL
    database:
      passwordSecretName: "postgres-postgresql"  # ✅ CORREÇÃO: Secret existente
      passwordSecretKey: "password"     # ✅ CORREÇÃO: Key correta
      password: ""  # ✅ CORREÇÃO: Vazio para usar do secret existente
    
    # Basic Auth
    basicAuth:
      passwordSecretName: ""
      passwordSecretKey: "basic-auth-password"
      password: "admin123"
    
    # Encryption Key (DEVE ter 32 caracteres)
    encryption:
      keySecretName: ""
      keySecretKey: "encryption-key"
      key: "minikube-test-key-32-chars-here"  # Exatamente 32 chars
    
    # Redis password (vazio para Redis sem auth)
    redis:
      passwordSecretName: ""
      passwordSecretKey: "redis-password"
      password: ""  # Sem senha para Redis externo
    
    # External Secrets desabilitado
    externalSecrets:
      enabled: false

# PostgreSQL DESABILITADO (usando externo)
postgresql:
  enabled: false

# Redis DESABILITADO (usando externo)
redis:
  enabled: false

# Service Configuration
service:
  main:
    type: ClusterIP
    port: 5678
    targetPort: 5678
  webhooks:
    type: ClusterIP
    port: 5678
    targetPort: 5678

# Ingress - HABILITADO para teste
ingress:
  enabled: true
  className: "nginx"
  
  # Subdomínios para teste
  main:
    subdomain: "n8n"
    enabled: true
  webhooks:
    subdomain: "n8n-webhooks"
    enabled: true

  mcp:
    enabled: false  # ✅ CORREÇÃO: Mudado para false
 
  # Configurações NGINX para teste
  nginx:
    proxyBodySize: "32m"
    proxyReadTimeout: "300"
    proxySendTimeout: "300"
    proxyConnectTimeout: "300"
    clientMaxBodySize: "32m"
    compression: "true"
    sslRedirect: "false"      # HTTP para teste
    forceSslRedirect: "false" # HTTP para teste
  
  # Headers de segurança básicos
  security:
    xFrameOptions: "SAMEORIGIN"
    xContentTypeOptions: "nosniff"
    xXssProtection: "1; mode=block"
    referrerPolicy: "same-origin"
    contentSecurityPolicy: "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:"
  
  # Rate limiting para teste (mais permissivo)
  rateLimit:
    requests: "200"
    window: "1m"

# Certificados - DESABILITADOS para teste (HTTP apenas)
certificates:
  enabled: false

# API Ingress - HABILITADO para teste
ingressApi:
  enabled: true
  subdomain: "n8n-api"
  
  # Rate limiting específico para API
  rateLimit:
    requests: "300"
    window: "1m"
  
  # CORS permissivo para teste
  cors:
    allowOrigin: "*"
    allowMethods: "GET, POST, PUT, DELETE, OPTIONS"
    allowHeaders: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"

# Persistence - REDUZIDO para Minikube
persistence:
  enabled: true
  storageClass: "standard"  # Minikube default
  accessMode: ReadWriteOnce
  size: "2Gi"  # Mínimo para Minikube

# Service Account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Pod Disruption Budget - DESABILITADO para Minikube
podDisruptionBudget:
  enabled: false

# Network Policies - DESABILITADAS para Minikube
networkPolicy:
  enabled: false

# Monitoring - DESABILITADO para Minikube
serviceMonitor:
  enabled: false

# Overrides
nameOverride: ""
fullnameOverride: ""

service:
  enabled: true
  annotations: {}
  # -- Service types allow you to specify what kind of Service you want.
  # E.g., ClusterIP, NodePort, LoadBalancer, ExternalName
  type: ClusterIP
  # -- Service port
  port: 80
